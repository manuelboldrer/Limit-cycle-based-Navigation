%% Import data from text file.
% Script for importing data from the following text file:
%
%    G:\Il mio Drive\0_Dottorato-\Projects\2018-2019\SFM control1\C++_SFM_ovals\file.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/05/31 16:36:10

%% Initialize variables.
filename = 'C:\Users\mboldrer\Documents\2018-2019\SFM control1\C++_SFM_ovals\file.txt';
delimiter = ',';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Create output variable
file1 = table;
file1.VarName1 = cell2mat(raw(:, 1));
file1.VarName2 = cell2mat(raw(:, 2));
file1.VarName3 = cell2mat(raw(:, 3));
file1.VarName4 = cell2mat(raw(:, 4));
file1.VarName5 = cell2mat(raw(:, 5));
file1.VarName6 = cell2mat(raw(:, 6));
file1.VarName7 = cell2mat(raw(:, 7));
file1.VarName8 = cell2mat(raw(:, 8));
file1.VarName9 = cell2mat(raw(:, 9));
file1.VarName10 = cell2mat(raw(:, 10));
file1.VarName11 = cell2mat(raw(:, 11));
file1.e038 = cell2mat(raw(:, 12));
file1.e028 = cell2mat(raw(:, 13));

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;




ARRAY = (table2array(file1));

plot_obj             = gobjects(1,7); % initialize array of plots
% centr                = gobjects(size(file1,1),1);
wp                   = gobjects(size(file1,1),1);
% arrow1                = gobject(1,1);

%**************************************************************************
figure('Name', 'Povo','units','normalized','outerposition',[0 0 1 1]);
hold on;
title('Map','Interpreter','latex');
grid on;
xlabel('$x_{glob} [m] $','Interpreter','latex');
ylabel('$y_{glob} [m] $','Interpreter','latex');
axis equal;
axis([0 10 0 10])
dA = 0.35;

% plotObstacles1(obs, 1 ,{[0.7,0.7,0.65],1});
for kk = 1 :10: size(file1,1)
    plot_obj  = plot_unicycle(ARRAY(kk,1), ARRAY(kk,2), ARRAY(kk,3), 'k', 1);
    %     centr     = plot(ARRAY(kk,4),ARRAY(kk,5),'bx');
    wp        = plot(ARRAY(kk,6),ARRAY(kk,7),'gd');
    circ1     = circle(ARRAY(kk,4),ARRAY(kk,5),0.2,'k');
    circ2     = circle(ARRAY(kk,1),ARRAY(kk,2),0.35,'r');
    arrow1    = quiver(ARRAY(kk,1),ARRAY(kk,2),ARRAY(kk,8),ARRAY(kk,9),'r');
    arrow2    = quiver(ARRAY(kk,1),ARRAY(kk,2),ARRAY(kk,10),ARRAY(kk,11),'b');
    arrow3    = quiver(ARRAY(kk,4),ARRAY(kk,5),ARRAY(kk,12),ARRAY(kk,13),'g');
    
    plot(ARRAY(1:kk,1), ARRAY(1:kk,2),'b.')
    %   circ3     = circle(5,5.0,0.35,'r');
    %   circ3     = circle(3,4.0,0.35,'r');
    %     circ3     = circle(3,6.0,0.35,'r');
    %     plot(2.5,9,'kd',2.5,4.5,'kd',8,5,'kd')
%               delete(arrow2)

    drawnow
    delete(plot_obj)
    %     delete(centr)
    delete(wp)
    delete(circ1)
    delete(circ2)
    delete(arrow1)
    delete(arrow2)
    delete(arrow3)

    %     delete(circ3)
end

te = 200;
% for kk = 1:te
%     d1(kk) = norm([x1(kk)-x_obstacle(kk,1),y1(kk)-y_obstacle(kk,1)]);
% end
% 
% dist = min(d1);
% dx  = gradient(x1);
% ddx = gradient(dx);
% dy  = gradient(y1);
% ddy = gradient(dy);
% num   = dx .* ddy - ddx .* dy;
% denom = dx .* dx + dy .* dy;
% denom = sqrt(denom);
% denom = denom .* denom .* denom;
% curvature1 = num ./ denom;
% curvature1(denom < 0) = NaN;
% 
% curv            = sum(sqrt(curvature1.^2));
% dc1             = gradient(curvature1);
% dcurv(cnt,cnt2) = sum(dc1.^2);






